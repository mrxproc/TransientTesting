<section xmlns="http://docbook.org/ns/docbook" xmlns:cs="http://www.w3.org/XML/XProc/2006/04/components#" xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" xmlns:p="http://www.w3.org/ns/xproc" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="c.response_body">
<title>Converting Response Entity Bodies</title>

<para>The entity of a response may be multipart per <biblioref linkend="rfc2046"/>. In those situations, the result document will be
a <tag>c:multipart</tag> element that contains multiple
<tag>c:body</tag> elements inside.</para>

<note xml:id="note-multipart-multipart">
<para>Although it is technically possible for any of the individual
parts of a multipart message to <emphasis>also</emphasis> be
multipart, XProc does not provide a standard representation for such
messages. <impl>The interpretation of a multipart message inside
another multipart message is
<glossterm>implementation-dependent</glossterm>.</impl></para>
</note>

<para>The result of the <tag>p:http-request</tag> step is an XML
document. For media types (images, binaries, etc.) that can't be
represented as a sequence of Unicode characters, the response is
encoded as <literal>base64</literal>
and then returned as text children of the <tag>c:body</tag> element.
If the content is base64-encoded, the <tag class="attribute">encoding</tag> attribute on <tag>c:body</tag> must
be set to “<literal>base64</literal>”.</para>

<note xml:id="ednote-non-xml" role="editorial">
<title>Editorial Note</title>
<para>This section hasn't been updated to reflect the fact that
non-XML documents are now possible. It should probably say
something like:</para>
<para>If the document identified has a non-XML content type, no extra
processing is mandated. The number and variety of media types
that an implementation can load is
implementation-defined.</para>
</note>

<para>If the media type of the response
is a text type with a
<code>charset</code> parameter that is a Unicode character encoding
(per <biblioref linkend="unicodetr17"/>) or
is recognized as a non-XML media type whose contents are encoded as a
sequence of Unicode characters (e.g. it has a character parameter or
the definition of the media type is such that it requires Unicode),
the content of the constructed <tag>c:body</tag> element is the translation
of the text into a sequence of Unicode characters.</para>

<para>If the response is an XML media type, the content of the
constructed <tag>c:body</tag> element is the result of decoding the
body as necessary, then parsing it with an XML parser.</para>

<itemizedlist>
<listitem>
<para>The parser which <tag>p:http-request</tag> employs
<rfc2119>must</rfc2119> process the external subset; all general and
external parsed entities <rfc2119>must</rfc2119> be fully expanded.</para>

<note xml:id="ednote-parser" role="editorial">
<title>Editorial Note</title>
<para>The requirement to process the external subset comes from p:load,
we probably don't want to impose that on all p:http-request calls.
Need a way to control it?</para>
</note>

</listitem>
<listitem>
<para>It
<rfc2119>may</rfc2119> perform <tag class="attribute">xml:id</tag>
processing, but it <rfc2119>must not</rfc2119> perform any other
processing, such as expanding XIncludes.</para>
</listitem>
<listitem>
<para>The parser
<rfc2119>must</rfc2119> be conformant to <citetitle>Namespaces in
XML</citetitle>.</para>
</listitem>
<listitem>
<para>Parsing the document
<rfc2119>must not</rfc2119> fail due to validation errors.
</para>
</listitem>
</itemizedlist>

<para>If the content
is not well-formed, the step fails.</para>

<note xml:id="ednote-combine-parsing" role="editorial">
<title>Editorial Note</title>
<para>This prose should be consolidated into a single place.</para>
</note>

<para>In a <tag>c:body</tag> in a response, the
<tag class="attribute">content-type</tag> attribute <rfc2119>must</rfc2119>
be an exact copy of the value returned in the
<literal>Content-Type</literal> header. That is, it must reflect the
content type actually returned, not any override value that may have been
specified, and it must include any parameters returned by the server.</para>

<para>In the case of a multipart response, the same rules apply when
constructing a <tag>c:body</tag> element for each body part
encountered.</para>

<note xml:id="note-text-html">
<para>Given the above description, any content identified as
<code>text/html</code> will be encoded as (escaped) text or
base64-encoded in the <tag>c:body</tag> element, as HTML isn't always
well-formed XML. A user can attempt to convert such content into XML
using the <tag>p:unescape-markup</tag> step.</para>
</note>
</section>
